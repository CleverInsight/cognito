import os
import math


class QuestionRank:
	"""
	QuestionRank is introducing TFQR Algorithm which is focused on
	scoring the question and answers generated by the automated 
	analysis `cognito audit` 
	
	:param      dataframe:  pandas dataframe is passed
	:type       pandas.dataframe:  { column name }
	returns: dataframe | pandas.dataframe
	


	Algorithms:
		- First convert a copy of dataframe into textual summary `paragraph`.
		- Clean the created paragraph by ignoring stopwords.
		- Context analysis by frequency count for each terms in the paragraph
			and sort it descending order.
		- Iterrate over given dataframe question one by one and calculate the
			TF IDF score for each question with `paragraph`
			
			tf-idf(t, d) = tf(t, d) * log(N/(df + 1))

		- Append a attribute for each question `score` and allocate the score.


	Usage:
	======
		INPUT: df
		--------------------------------------------------------------
		|  question  										  | answer
		--------------------------------------------------------------
		|  Lowest Recovered was 0 of Province/State Macau.    | 0
		--------------------------------------------------------------
		|  Highest Recovered was 362 of Province/State Hubei  | 40
		--------------------------------------------------------------
		|  Lowest Recovered was 0 of Country Vietnam.         | 100
		--------------------------------------------------------------
		|  Highest Recovered was 133 of Last Update 1/29/20   | 40
		--------------------------------------------------------------

		>>> q = QuestionRank.rank(df)
		>>> q


		Expected outcome: df
		-------------------------------------------------------------------------
		|  question  										  | answer | score
		-------------------------------------------------------------------------
		|  Lowest Recovered was 0 of Province/State Macau.    | 0      |	  0.2
		-------------------------------------------------------------------------
		|  Highest Recovered was 362 of Province/State Hubei  | 40     |	  0.8
		-------------------------------------------------------------------------
		|  Lowest Recovered was 0 of Country Vietnam.         | 100	   |	  0.9
		-------------------------------------------------------------------------
		|  Highest Recovered was 133 of Last Update 1/29/20   | 40	   |	  0.6
		-------------------------------------------------------------------------




	"""

	def __init__(self, dataframe):
		self.data = dataframe


	def prepare(self):
		pass


	@staticmethod
	def rank():

		# TODO 
		pass







